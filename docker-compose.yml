version: "3.7"
services:
  nginx:
    container_name: nginx
    expose:
      - 1443
    ports:
      - "1443:443"      
    volumes:
      - "./nginx/conf/:/etc/nginx/conf.d/:rw"
    networks:
      - frontend-production
    build:
      context: ./nginx
    depends_on:
      - api
      - frontend
    restart: always
    command: [nginx-debug, '-g', 'daemon off;']

  database:
    container_name: database
    image: mariadb:latest
    expose:
      - 3306
    ports:
      - "3306:3306" 
    volumes:
      - ./db/data:/var/lib/mysql:rw
      - ./db/init/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    environment:
      MARIADB_ROOT_PASSWORD: secret
      MARIADB_USER: user
      MARIADB_PASSWORD: pass
    networks:
      - backend-production
    restart: always

  api:
    container_name: api
    expose:
      - 80
    ports:
      - "5001:80" 
    networks:
      - backend-production
    build:
      context: ./backend/devenv-backend
    environment:
      DB_CONNECTION_STRING: "Server=database;Port=3306;Uid=root;Pwd=secret;Database=userdb;sslmode=none;"
      ASPNETCORE_ENVIRONMENT: "Development"
    restart: always

  frontend:
    container_name: frontend
    networks:
      - backend-production
      - frontend-production
    expose:
      - 80
    build:
      context: ./frontend/devenv-frontend
    restart: always
    environment:
      ASPNETCORE_ENVIRONMENT: "Production"
      UsersEndpoint: "http://api/users"
  
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - 9090:9090
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
      - cadvisor
    networks:
      - monitoring

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - 8080:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    depends_on:
      - nginx
      - api
      - frontend
    networks:
      - monitoring

  grafana:
    container_name: grafana
    ports:
      - 3000:3000
    build:
      context: ./grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: grafana
      GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH: "/var/lib/grafana/dashboards/dashboard.json"
    volumes:
      - ./grafana:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - monitoring

networks:
  backend-production:
    name: backend-nw-production
    driver: bridge
  frontend-production:
    name: frontend-nw-production
    driver: bridge
  monitoring:
    name: monitoring-nw-production
    driver: bridge

         